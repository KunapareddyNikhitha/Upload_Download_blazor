@page "/"
@using BlazorRemainig.Services;
@inject IFileUpload fileUpload;

<div class="col-6">
	<h1>File upload in Blazor</h1>
	<div class="form-group">
		<InputFile OnChange="OnInputFileChange" multiple />
		<button class="btn btn-sm btn-success" type="button" @onclick="UploadFiles">
			Upload
		</button>
		<br />
		@{
			var progressCss = "progress" + (displayProgress ? "" : "d-none");
			var progressWidthStyle = progressPercent + "%";
		}
		<div class="@progressCss">
			<div class="progress-bar" role="progressbar"
				 style="width:@progressWidthStyle" area-valuenow="@progressPercent"
				 area-minvalue="0" area-maxvalue="100"></div>
		</div>
		<label>@labelText</label>
		@if (previewImages.Count > 0)
		{
			<div class="d-flex">
				@foreach (var image in previewImages)
				{
					<img src="@image" alt="@image" width="100" height="100" />
				}
			</div>
		}
	</div>
</div>

@code {
	IReadOnlyList<IBrowserFile> selectedFiles;
	private bool displayProgress;
	private IList<string> previewImages = new List<string>();

	private int progressPercent;

	private string labelText = "";

	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		selectedFiles = new List<IBrowserFile>();
		selectedFiles = e.GetMultipleFiles();
		foreach (var file in selectedFiles)
		{
			var imagUrl = await fileUpload.GeneratePreviewUr(file);
			previewImages.Add(imagUrl);
		}
	}

	private async Task UploadFiles()
	{
		try
		{
			if (selectedFiles is not null && selectedFiles.Count > 0)
			{
				var uploaded = 0;
				displayProgress = true;

				foreach (var file in selectedFiles)
				{
					var res = await fileUpload.UploadFile(file);
					if(res=="false")throw new Exception("file is too large");
					uploaded++;
					progressPercent = (int)(uploaded / selectedFiles.Count) * 100;

				}
				displayProgress = false;
				labelText = $"Upload of {selectedFiles.Count} files sucessful";
			}

		}
		catch (Exception ex)
		{
			labelText = $"Uload failed due to {ex.Message}";
		}
	}


}